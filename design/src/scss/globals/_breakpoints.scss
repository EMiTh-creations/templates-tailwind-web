// https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
// https://github.com/sebastianmusial/SSCSS/blob/master/src/mixins/_mixins.scss

// Usage:
// @include min-screen("small") {
// @include min-screen("medium") {
// @include min-screen("large") {
// @include min-screen("x-large") {
// and for max-width queries:
// @include max-screen("small") {
// @include max-screen("medium") {
// @include max-screen("large") {
// @include max-screen("x-large") {

$breakpoints: (
    "small": 640px,
    "medium": 768px,
    "large": 1024px,
    "x-large": 1280px,
) !default;

/// Mixin to manage responsive breakpoints
/// @author emilyjt
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin min-screen($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $width: map_get($breakpoints, $breakpoint);

        @media screen and (min-width: $width) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

/// Mixin to manage responsive breakpoints
/// @author emilyjt
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin max-screen($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $width: map_get($breakpoints, $breakpoint);
        $width: $width - 1px;

        @media screen and (max-width: $width) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}
